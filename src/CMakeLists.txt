cmake_minimum_required(VERSION 3.9.0)
project(cdcm)
enable_testing()

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
include(CheckCXXCompilerFlag)
function(enable_cxx_compiler_flag_if_supported flag)
    string(FIND "${CMAKE_CXX_FLAGS}" "${flag}" flag_already_set)
    if (flag_already_set EQUAL -1)
        check_cxx_compiler_flag("${flag}" flag_supported)
        if (flag_supported)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}" PARENT_SCOPE)
        endif ()
        unset(flag_supported CACHE)
    endif ()
endfunction()
option(BUILD_DEV "Build project with coverage and testing compiler flags." OFF)
if(BUILD_DEV)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
    include(CodeCoverage.cmake)
    APPEND_COVERAGE_COMPILER_FLAGS()
endif()
enable_cxx_compiler_flag_if_supported("-Wall")
enable_cxx_compiler_flag_if_supported("-Wextra")
#enable_cxx_compiler_flag_if_supported("-Werror")
enable_cxx_compiler_flag_if_supported("-pedantic")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ")
if (DEFINED ENV{DEPS_DIR})
    set(DEPS_DIR $ENV{DEPS_DIR})
    message(STATUS "Build machine")
else ()
    set(DEPS_DIR ${CMAKE_SOURCE_DIR}/deps)
    message(STATUS "Development machine")
endif ()

set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
set(Boost_USE_STATIC_LIBS ON)

if (NOT DEFINED $ENV{BOOST_INCLUDEDIR})
    set(BOOST_INCLUDEDIR /usr/include/boost169)
else ()
    set(BOOST_INCLUDEDIR $ENV{BOOST_INCLUDEDIR})
endif ()

if (NOT DEFINED $ENV{BOOST_LIBRARYDIR})
    set(BOOST_LIBRARYDIR /usr/lib64/boost169)
else ()
    set(BOOST_LIBRARYDIR $ENV{BOOST_LIBRARYDIR})
endif ()

message(STATUS ${BOOST_LIBRARYDIR})
message(STATUS ${BOOST_INCLUDEDIR})
find_package(Boost 1.69.0 COMPONENTS)
if (Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${Boost_LIBRARY_DIR})
else (Boost_FOUND)
    message(FATAL_ERROR "no Boost for you")
endif ()
message(STATUS "${BOOST_LIBRARYDIR}")

link_directories(${BOOST_LIBRARYDIR})
include_directories(${DEPS_DIR})
include_directories(common)
link_directories(${DEPS_DIR}/libpe-pev/build)

set(bin_dest "bin")
set(release_bin_dest "/opt/output/$ENV{CI_COMMIT_BRANCH}/bin")
set(release_lib_dest "/opt/output/$ENV{CI_COMMIT_BRANCH}/libs")
set(VERSION "1.0")
set(include_dest "include/cdcm-${VERSION}")
set(lib_dest "/opt/output/$ENV{CI_COMMIT_BRANCH}/libs")
add_subdirectory(scripts)
add_subdirectory(common)
add_subdirectory(backend)
add_subdirectory(supervisor)
add_subdirectory(frontend)
add_subdirectory(tests)
configure_file(../cdcm_settings.json /etc/cdcm/cdcm_settings.json COPYONLY)
configure_file(../Logger/module.xml /etc/cdcm/Logger/module.xml COPYONLY)
install(FILES ../Logger/module.xml DESTINATION /etc/cdcm/Logger/)
install(FILES ../cdcm_settings.json DESTINATION /etc/cdcm/)
install(FILES ../scripts/cdcm.sh DESTINATION ${release_bin_dest})

# uninstall target
if (NOT TARGET uninstall)
    configure_file(
            "${CMAKE_CURRENT_SOURCE_DIR}/uninstall.cmake.in"
            "${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake"
            IMMEDIATE @ONLY)

    add_custom_target(uninstall
            COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake)
endif ()
